#include <opencv2/core/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <string>
#include <cmath>

using namespace cv;
using namespace std;

static void convert_neon8px_int(const Mat* input, Mat* output)
{
  cout << "gi" << endl;
    uint8_t __restrict * dest = output->data;
    uint8_t __restrict * src  = input->data;
    int numPixels             = input->total();
    cout << "gi2" << endl;
    uint8x8_t rfac = vdup_n_u8 (77);
    uint8x8_t gfac = vdup_n_u8 (151);
    uint8x8_t bfac = vdup_n_u8 (28);

    register int n = numPixels / 8;
    uint16x8_t  temp;
    uint8x8_t result;
    uint8x8x3_t rgb;

    for (register int i = 0; i < n/32; i++, src += 8*3, dest += 8)
    {
        cout << "gifl " << endl;
        rgb  = vld3_u8 (src);

        temp = vmull_u8 (rgb.val[0],      rfac);
        temp = vmlal_u8 (temp,rgb.val[1], gfac);
        temp = vmlal_u8 (temp,rgb.val[2], bfac);

        result = vshrn_n_u16 (temp, 8);
        vst1_u8 (dest, result);
    }
}

int main(void)
{
    string imageName("test.jpg"); 
    
    Mat image  (480, 640, CV_8UC3, Scalar(0,0,0));
    Mat dest   (480, 640, CV_8UC1, Scalar(0));
    
    image = imread("test.jpg", IMREAD_COLOR); 
    
    convert_neon8px_int( &dest  , &image );
    namedWindow( "Display window", WINDOW_AUTOSIZE );
    imshow( "Display window", dest );

    waitKey(0);
    return 0;
    
}
