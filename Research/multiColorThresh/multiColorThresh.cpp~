#include <opencv2/core/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <string>
#include <inttypes.h>
#include <cmath>
#include "arm_neon.h"

using namespace cv;
using namespace std;

static void neon_asm_thresh( Mat* input, Mat* output )
{
  uint8_t __restrict * dest = output->data;
  uint8_t __restrict * src  = input->data;
  int numPixels  = input->total(); 

  __asm__ volatile(
		   "lsr %2, %2, #3                \n"
		   ".loop:                        \n"
		   "vld3.8   {d0-d2}, [%1]!       \n"
		   "vshr.u8 d0, d0, #5            \n"		  
		   "vst1.8  {d0}, [%0]!           \n"
		   "subs %2, %2, #1               \n"
		   "bne .loop                     \n"
		   :
		   : "r"(dest), "r"(src), "r"(numPixels)
		   ); 
}

static void set_bins( uint8_t* cB, uint8_t* rc )
{
  // minB, maxB, minR, maxR, minG, maxG
  //0--> 2^0 = 1
  *cB++ = 4; *cB++ = 23; *cB++ = 7; *cB++ = 23; *cB++ = 140; *cB++ = 169;
  *rc++ = 0; *rc++ = 0; *rc++ = 255;
  //1--> 2^1 = 2
  *cB++ = 39; *cB++ = 49; *cB++ = 120; *cB++ = 128; *cB++ = 113; *cB++ = 122;
  *rc++ = 0; *rc++ = 255; *rc++ = 0;
  //2--> 2^2 = 4
  *cB++ = 162; *cB++ = 183; *cB++ = 44; *cB++ = 64; *cB++ = 35; *cB++ = 53;
  *rc++ = 255; *rc++ = 0; *rc++ = 0;
  //3--> 2^3 = 8
  *cB++ = 85; *cB++ = 107; *cB++ = 83; *cB++ = 104; *cB++ = 173; *cB++ = 192;
  *rc++ = 95; *rc++ = 90; *rc++ = 180;
  //4--> 2^4 = 16
  *cB++ = 74; *cB++ = 96; *cB++ = 143; *cB++ = 160; *cB++ = 205; *cB++ = 212;
  *rc++ = 85; *rc++ = 120; *rc++ = 208;
  //5--> 2^5 = 32
  *cB++ = 219; *cB++ = 228; *cB++ = 197; *cB++ = 203; *cB++ = 234; *cB++ = 243;
  *rc++ = 223; *rc++ = 200; *rc++ = 238;
  //6--> 2^6 = 64
  *cB++ = 12; *cB++ = 20; *cB++ = 10; *cB++ = 15; *cB++ = 12; *cB++ = 21;
  *rc++ = 0; *rc++ = 0; *rc++ = 0;
  //7--> 2^7 = 128
  *cB++ = 38; *cB++ = 58; *cB++ = 37; *cB++ = 57; *cB++ = 113; *cB++ = 135;
  *rc++ = 48; *rc++ = 47; *rc++ = 124;
}

static void set_thresh( uint8_t* cB, uint8_t* cT )
{
  
  for (int i = 0; i < 256; i++)
    {
      *cT++ = 0; *cT++ = 0; *cT++ = 0;
      cT = cT - 3;
      printf("%d : ",i);
      for (int j = 0; j < 3; j++)
	{
	  for (int k = 0; k < 8; k++) 
	    {
	      if ( ( i > *(cB+(6*k)) )&&( i < *((cB+(6*k)) + 1) ) ) // 8 bins!!
		{
		  uint8_t mask = 0;
		  mask = 1 << k;
		  *cT = mask|*cT ;
		}
	    }
	  printf("%" PRIu8 ", ", *cT );
	  cB = cB + 2;
	  cT = cT + 1;
	}
      cB = cB - 6;
      printf("\n");
    }
}

static void do_thresh( Mat* input, Mat* output, uint8_t* cT )
{
  static uint8_t __restrict * src  = input->data;
  static uint8_t __restrict * dest = output->data;
  int numPixels = input->total();
  
  for (int i = 0; i < numPixels; i++)
    {
      *dest++ = (*( cT + *src++))&(*( cT + 1 + *src++))&(*( cT + 2 + *src++));
    }

}

static void do_recolor( Mat* input, Mat* output, uint8_t* rc )
{
}

int main(void)
{
    Mat image  (480, 640, CV_8UC3, Scalar(255,0,0));
    Mat dest   (480, 640, CV_8UC3, Scalar(0,0,0));
    Mat final  (480, 640, CV_8UC1, Scalar(0));
    uint8_t colorBins[8][6];
    uint8_t recolor[8][3];
    uint8_t colorThresh[256][3];

    image = imread("../test.png", IMREAD_COLOR); 
    
    namedWindow( "Display window", WINDOW_AUTOSIZE );
    imshow( "Display window", image );
    waitKey(0);

    set_bins( &colorBins[0][0], &recolor[0][0] );
    set_thresh( &colorBins[0][0], &colorThresh[0][0] );
    do_thresh( &image, &final, &colorThresh[0][0] );
    imshow( "Display window", final );
    waitKey(0);
    return 0;
}
